<?php

namespace App\Http\Controllers;

use App\Models\Item;
use App\Models\Malzeme;
use App\Models\Fnote;

use Illuminate\Http\Request;

use SimpleSoftwareIO\QrCode\Facades\QrCode;
//use PDF; // If you created the alias

use ZipArchive;

class MYPDF extends \TCPDF {

    public function Header() {

        $this->SetY(10);

        $this->SetFillColor(216, 226, 220);
        $this->Rect(0, 0, $this->getPageWidth(), PDF_MARGIN_TOP, 'F');

        $this->SetFillColor(45, 145, 220);

        $this->ImageSVG($file='/images/mtlogo.svg', $x=10, $y=10, $w='', $h='10', $link=url('/'), $align='', $palign='', $border=0, $fitonpage=false);
        $this->ImageSVG($file='/images/pdm_logo2.svg', $x=186, $y=6, $w='16', $h='', $link=url('/'), $align='', $palign='', $border=0, $fitonpage=false);

        $this->SetXY(35,17);
    }

    public function Footer() {

        $this->ImageSVG($file="/images/baykus_orange.svg", $x=8, $y=285, $w='6', $h='6', $link='https://kapkara.one', $align='', $palign='', $border=0, $fitonpage=false);

        $this->SetXY(14,290);
        $this->SetFont('helvetica', '', 6);

        $this->Cell(30, 0, 'kapkara.one', 0, false, 'L', 0, '', 0, false, 'M', 'M');

        $this->SetXY(170,290);
        $this->Cell(30, 0, 'masttech.net', 0, false, 'R', 0, '', 0, false, 'M', 'M');
        $this->SetXY(170,287);

        $this->Cell(30, 0, 'PDM Product Data Management', 0, false, 'R', 0, '', 0, false, 'M', 'M');
    }
}



class PDFController extends Controller
{

    public $pdf_fname;
    public $tree_items;
    public $parents = [];



    public function getType()
    {
        // if ( request('cascaded') ) {
        //     $this->generateCascadedPdf(request('id'));
        // } else {
            $this->generatePdf(request('id'),true);
        // }
    }



    public function generatePdf($itemId, $file_return)
    {
        $item = Item::find($itemId);

        $fnotes = false;

        foreach (Fnote::where('item_id',$item->id)->get() as $r) {
            $fnotes[] = ['no' => $r->no,'text_tr' => $r->text_tr,'text_en' => $r->text_en];
        }

        switch ($item->part_type) {
            case 'Detail':
                $url = url('/').'/details/view/'.$item->id;
                break;

            case 'Assy':
                $url = url('/').'/products-assy/view/'.$item->id;
                break;

            case 'Buyable':
                $url = url('/').'/buyables/view/'.$item->id;
                break;

            case 'MakeFrom':
                $url = url('/').'/MakeFrom/view/'.$item->id;
                break;

        }

        // Get Parents
        $parents = Item::whereJsonContains('bom',['id' => (int) $itemId])->get();
        if ($parents) {
            $this->parents = $parents;
        }




        $pdf = new MYPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'utf-8', false);

        $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT,PDF_MARGIN_BOTTOM);

        $pdf->SetCreator('Automatically generated by PDM');
        $pdf->SetAuthor('kapkara.one');
        $pdf->SetTitle('Part BOM');

        $pdf->AddPage();

        $pdf->SetY(50);
        $pdf->SetFont('dejavusans', '', 16);

        $pdf->Cell(0, 0, 'ÜRÜN VERİSİ / BILL OF MATERIALS', 0, false, 'C', 0, '', 0, false, 'M', 'M');

        $pdf->SetXY(PDF_MARGIN_LEFT,60);

        $qr = QrCode::generate($url);

        $pdf->ImageSVG($file="@$qr", $x=10, $y=60, $w='20', $h='20', $link="$url", $align='', $palign='', $border=0, $fitonpage=false);

        $pdf->SetXY(32,60);

        $pdf->SetFont('dejavusans', 'B', 24);
        $pdf->Cell(50, 10, $item->part_number.'-'.$item->version, 0, $ln=0, 'L', 0, '', 0, false, 'T', 'T');

        $pdf->SetXY(32,70);
        $pdf->SetFont('dejavusans', '', 12);
        $pdf->SetTextColor(131, 133, 140);

        $pdf->MultiCell(142, 8, $item->description, 0, 'L', 0, 0, '', '', true);
        $pdf->SetTextColor(0,0,0);
        $pdf->SetFont('dejavusans', '', 8);

        $pdf->SetTextColor(35, 100, 170);

        $pdf->SetXY(175,60);
        $pdf->SetFillColor(230, 230, 230);
        $pdf->SetTextColor(0,0,0);

        $pdf->Cell(25, 5, 'ECN-'.$item->c_notice_id, 0, $ln=0, 'C', 1, '', 0, false, 'T', 'C');
        $pdf->SetXY(175,66);
        $pdf->Cell(25, 5, $item->weight.' kg', 0, $ln=0, 'C', 1, '', 0, false, 'T', 'C');

        $pdf->Ln();
        $pdf->SetY(90);

        if ($item->malzeme_id) {
            $malzeme =  Malzeme::find($item->malzeme_id);

            $material_definition = $malzeme->material_definition;
            $family = config('material.family')[$malzeme->family];
            $form = config('material.form')[$malzeme->form];

            $malzeme_text = '
            <h3 style="font-weight:bold;font-size:12px">Malzeme / Material</h3>
            <h3 style="font-weight:normal;font-size:10px">'.$family.' - '.$form.' - '. $material_definition.'</h3>';

            $pdf->writeHTML($malzeme_text, true, false, false, false, '');
        }

        if ($item->part_type == 'MakeFrom' && $item->makefrom_part_id > 0) {
            $source_part =  Item::find($item->makefrom_part_id);

            $malzeme_text = '
            <h3 style="font-weight:bold;font-size:12px">Kullanılan Parça / Source Part</h3>
            <span style="font-weight:normal;font-size:10px;">Bu parça aşağıda adı ve numarası verilen kaynak parça kullanılarak imal edilecektir</span>
            <h3 style="font-weight:normal;font-size:10px;color:blue">'.$source_part->part_number.'-'.$source_part->version.' '. $source_part->description.'</h3>';

            $pdf->writeHTML($malzeme_text, true, false, false, false, '');
        }

        if ( $item->pnotes->count() > 0) {

            $notlar = '
            <br>
            <h3 style="font-weight:bold;font-size:12px;">Genel Ürün Notları / General Part Notes</h3>
            <ol>';
            foreach ($item->pnotes as $note) {
                $notlar .= '<li style="font-weight:normal;font-size:10px">'.$note->text_tr.'</li>';
            }

            $notlar .= '
            </ol>';

            $pdf->writeHTML($notlar, true, false, false, false, '');
        }

        if ($fnotes) {

            $notlar = '
            <br>
            <h3 style="font-weight:bold;font-size:12px;">Özel Ürün Notları / Part Flag Notes</h3>
            <ol>';
            foreach ($fnotes as $note) {
                $notlar .= '<li style="font-weight:normal;font-size:10px">'.$note['text_tr'].'</li>';
            }

            $notlar .= '
            </ol>';

            $pdf->writeHTML($notlar, true, false, false, false, '');
        }

        if ($item->vendor) {

            $vendor = '
            <br>
            <h3 style="font-weight:bold;font-size:12px;">Firma İsmi / Vendor</h3>
            <h3 style="font-weight:normal;font-size:10px">'.$item->vendor.'</h3>';

            $pdf->writeHTML($vendor, true, false, false, false, '');
        }

        if ($item->vendor_part_no) {

            $vendor_part_no = '
            <br>
            <h3 style="font-weight:bold;font-size:12px;">Firma Ürün Numarası / Vendor Part Number</h3>
            <h3 style="font-weight:normal;font-size:10px">'.$item->vendor_part_no.'</h3>';

            $pdf->writeHTML($vendor_part_no, true, false, false, false, '');
        }

        if ($item->remarks) {

            $remarks = '
            <br>
            <h3 style="font-weight:bold;font-size:12px;">Notlar / Remarks</h3>
            <h3 style="font-weight:normal;font-size:10px">'.$item->remarks.'</h3>';

            $pdf->writeHTML($remarks, true, false, false, false, '');
        }

        if ($item->bom) {

            $pdf->setY($pdf->GetY()+10);
            $pdf->SetFont('dejavusans', '', 10);

            $records = json_decode($item->bom);

            if (count($records) > 30) {
                $pages = array_chunk($records, 30);
            } else {
                $pages[] = $records;
            }

            foreach ($pages as $page_rows) {

                $table = '
                <table cellpadding="3" align="left" border-collapse="collapse" border="1px solid #f5f7dc">

                    <thead>
                    <tr style="background-color:#d8e2dc">
                        <th style="width:15%;">Part Number</th>
                        <th style="width:10%">Type</th>
                        <th style="width:60%">Description</th>
                        <th style="width:15%;text-align:right;">Miktar<br>Quantity</th>
                    </tr>
                    </thead>';

                    foreach ($page_rows as $i) {
                        $table .= '
                        <tr>
                            <td style="width:15%;background-color: #feffea;">'.$i->name.'-'.$i->version.'</td>
                            <td style="width:10%">'.$i->part_type.'</td>
                            <td style="width:60%">'.$i->description.'</td>
                            <td style="width:15%;text-align:right;">'.$i->qty.'</td>
                        </tr>';
                    }

                $table .= '
                </tbody>
                </table>';

                if ( $pdf->GetY() > 120 & count($records) > 6) {
                    $pdf->AddPage();
                    $pdf->SetY(40);
                }

                $pdf->writeHTML($table, true, false, false, false, '');
            };
        }


        // Next Higher Assembly
        if ( $this->parents->count() > 0) {

            $nexthigher = '
            <br>
            <h3 style="font-weight:bold;font-size:12px;">Üst Montaj Bileşenleri / Where Used</h3>
            <ul>';
            foreach ($this->parents as $parent) {
                $nexthigher .= '<li style="font-weight:normal;font-size:10px">'. $parent->part_number.'-'. $parent->version.' ' .$parent->description .'</li>';
            }

            $nexthigher .= '
            </ul>';

            $pdf->writeHTML($nexthigher, true, false, false, false, '');
        }

        $fname = 'BOM_'.$item->part_number.'R'.$item->version;

        $this->pdf_fname = '/tmp/'.$fname.'.pdf';

        if ($file_return) {
            $pdf->Output($fname, 'I'); // 'I' means inline, you can change it to 'D' to force download
        } else {

            //dd($this->pdf_fname);
            $pdf->Output($this->pdf_fname,'F');
        }


    }







    public function generateCascadedPdf($assyId)
    {
        $assy = Item::find($assyId);

        $this->getItemTree($assyId);

        $zip = new ZipArchive;
        $zipFileName = 'BOM_'.$assy->part_number.'R'.$assy->version.'.zip';

        if( $zip->open(public_path($zipFileName),ZipArchive::CREATE) === true ) {

            $this->generatePdf($assyId,false);
            $zip->addFile($this->pdf_fname,basename($this->pdf_fname));

            foreach( $this->tree_items as $itemId) {
                $this->generatePdf($itemId,false);
                $zip->addFile($this->pdf_fname,basename($this->pdf_fname));
            }

            $zip->close();

            return response()->download(public_path($zipFileName))->deleteFileAfterSend(true);
        }
    }




    public function getItemTree($id) {

        $assy = Item::find($id);

        if ($assy->bom) {

            foreach( json_decode($assy->bom) as $item) {

                if($item->part_type != 'Standard') {
                    $this->tree_items[] = $item->id;
                }

                if ($item->part_type == 'Assy') {
                    $this->getItemTree($item->id);
                }
            }
        }
    }



}


